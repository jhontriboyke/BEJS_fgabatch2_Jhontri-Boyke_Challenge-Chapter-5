openapi: 3.0.3
info:
  title: Binar Bank Challenge Chapter 4 API Documentation
  description: >-
    Binar BEJS Bootcamp Challenge Chapter 4 - Bank System API Documentation.

    The challenge is to build a _simple_ Bank System REST API where can handle basic CRUD (Create, Read, Update, dan Delete) operations.


    The REST API for now only supported on your localhost server, please provide and define your .env file.
    **Further update for online server will be implemented**.


    Below are the detailed information on how to use the API, including all endpoints to use, request methods, and example responses. 


    You can find out more about

    Some useful link(s):

    - [Binar BE Challenge CH4 Repository](https://github.com/jhontriboyke/binar-be-challenge-ch4)
  contact:
    email: jhontriboyke@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:PORT/api/v1
tags:
  - name: user
    description: User endpoints
  - name: account
    description: Account endpoints
  - name: transaction
    description: Transaction endpoints
paths:
  /users:
    get:
      tags:
        - user
      summary: Get all users
      description: Retrieve all existing users
      operationId: getAllUsers
      responses:
        "200":
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      example: Success
                    message:
                      type: string
                      example: Data retrieved successfully!!
                    data:
                      type: object
                      properties:
                        users:
                          type: array
                          items:
                            $ref: "#/components/schemas/User"
    post:
      tags:
        - user
      summary: Create a new user
      description: Add a new user
      operationId: createUser
      requestBody:
        description: Create a new user by passing request body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: User created
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/UserComplete"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Validation failed
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        property:
                          type: string
                          example: "street"
                        message:
                          type: string
                          example: Street name is required
  /users/{id}:
    get:
      tags:
        - user
      summary: Get an user by id
      description: Retrieve an user by user id as parameter
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: effee1ce-cd7d-4719-83f4-6cf18d97ad3b
      responses:
        "200":
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Data retrieved successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/UserComplete"
        "404":
          description: Data did not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Failed
                  message:
                    type: string
                    example: User not found
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        example:
                          $ref: "#/components/schemas/User/properties/id/example"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: effee1ce-cd7d-4719-83f4-6cf18d97ad3b
        first_name:
          type: string
          example: Doe
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@mail.com
    Profile:
      type: object
      properties:
        id:
          type: string
          example: 28c3b9a3-c5fa-411c-b8d3-d2f0c6571c21
        identity_number:
          type: string
          example: 6203111122223333
        identity_type:
          type: string
          default: KTP
          enum:
            - KTP
            - KK
            - Passport
        phone_number:
          type: string
          example: 081122334455
        nationality:
          type: string
          example: US
        job:
          type: string
          example: Web Developer
    Address:
      type: object
      properties:
        id:
          type: string
          example: c2c31e1c-e246-450f-b79c-75835ead8660
        street:
          type: string
          example: Patih Rumbih
        village:
          type: string
          example: Hampatung
        postal_code:
          type: string
          example: 73511
        city:
          type: string
          example: Kuala Kapuas
        province:
          type: string
          example: Kalimantan Tengah
        country:
          type: string
          example: Indonesia
    UserComplete:
      type: object
      properties:
        id:
          type: string
          example: effee1ce-cd7d-4719-83f4-6cf18d97ad3b
        first_name:
          type: string
          example: Doe
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@mail.com
        profile:
          $ref: "#/components/schemas/Profile"
        address:
          $ref: "#/components/schemas/Address"
    CreateUser:
      type: object
      properties:
        first_name:
          type: string
          example: Doe
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@mail.com
        password:
          type: string
          example: 123456!
        identity_number:
          type: string
          example: 6203111122223333
        identity_type:
          type: string
          default: KTP
          enum:
            - KTP
            - KK
            - Passport
        phone_number:
          type: string
          example: 081122334455
        nationality:
          type: string
          example: US
        job:
          type: string
          example: Web Developer
        street:
          type: string
          example: Patih Rumbih
        village:
          type: string
          example: Hampatung
        postal_code:
          type: string
          example: 73511
        city:
          type: string
          example: Kuala Kapuas
        province:
          type: string
          example: Kalimantan Tengah
        country:
          type: string
          example: Indonesia
